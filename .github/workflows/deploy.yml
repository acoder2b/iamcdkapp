name: Deploy CDK App to Multiple Accounts

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read      

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
            source .venv/bin/activate
            pytest tests/unit

      - name: Install AWS CDK and Utilities
        run: |
          npm install -g aws-cdk@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Install Synk CLI
        run: npm install -g snyk
      
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: CDK Synthesise 
        run: |
          source .venv/bin/activate
          cdk synth -o cdk.out
          echo "Generated Stacks:"
          ls cdk.out/*.template.json | sed 's|cdk.out/||;s|.template.json||'
          
          
      # - name: Configure AWS credentials with long term IAM user credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.GITHUBACTIONS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.GITHUBACTIONS_SECRETS_ACCESS_KEY }}
      #     aws-region: us-east-1

      - name: Configure AWS Credentials using OIDC Identity
        uses: aws-actions/configure-aws-credentials@v4
        with:
           role-to-assume: arn:aws:iam::909180469036:role/OIDC-GitHubActionsRole
           role-session-name: OIDC-GitHubActionsRole
           aws-region: us-east-1    
           audience: sts.amazonaws.com
           role-duration-seconds: 3600
          
      - name: Set Environment Variables
        id: vars
        run: |
          echo "month=$(date +'%Y-%m')" >> $GITHUB_ENV
          echo "date=$(date +'%m-%d-%Y')" >> $GITHUB_ENV
          echo "datetime=$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
        
      - name: Scan cdk json output
        run: snyk iac test cdk.out/*.json --sarif-file-output=snyk_${{ env.datetime }}.sarif --report
        continue-on-error: true

      - name: Deploy to Multiple Accounts
        run: |
          set -eo pipefail
          source .venv/bin/activate


          # List all synthesized stack templates
          for stack_template in cdk.out/*.template.json; do
            # Extract the stack name
            stack_name=$(basename $stack_template .template.json)

          # Extract the account ID from the stack name (assuming stack names have account IDs)
          account_id=$(echo $stack_name | grep -oP '(?<=IamRoleConfigStack-)\d+')

          if [ -n "$account_id" ]; then
            role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
            echo "Deploying stack $stack_name to account $account_id using role $role_arn"

            # Assume the role for the current target account
            credentials=$(aws sts assume-role --role-arn $role_arn --role-session-name github-actions || { echo "Failed to assume role: $role_arn"; exit 1; })
            export TARGET_AWS_ACCESS_KEY_ID=$(echo $credentials | jq -r '.Credentials.AccessKeyId')
            export TARGET_AWS_SECRET_ACCESS_KEY=$(echo $credentials | jq -r '.Credentials.SecretAccessKey')
            export TARGET_AWS_SESSION_TOKEN=$(echo $credentials | jq -r '.Credentials.SessionToken')

            # Deploy the stack using the pre-synthesized template
            AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN cdk deploy $stack_name --app "cdk.out" --require-approval never || { echo "Failed to deploy stack: $stack_name"; exit 1; }

            # Unset AWS credentials
            unset TARGET_AWS_ACCESS_KEY_ID TARGET_AWS_SECRET_ACCESS_KEY TARGET_AWS_SESSION_TOKEN
          else
            echo "Could not extract account ID from stack name $stack_name"
            exit 1
          fi
          done

          # for file in iamConfigs/*.yaml; do
          #   account_ids=$(yq eval '.account_id | .[]' "$file")
          #   for account_id in $account_ids; do
          #     role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
          #     stack_name="IamRoleConfigStack-$account_id"
          #     echo "Deploying stack $stack_name to account $account_id using role $role_arn"

          #     # Assume the role for the current target account
          #     credentials=$(aws sts assume-role --role-arn $role_arn --role-session-name github-actions || { echo "Failed to assume role: $role_arn"; exit 1; })
          #     export TARGET_AWS_ACCESS_KEY_ID=$(echo $credentials | jq -r '.Credentials.AccessKeyId')
          #     export TARGET_AWS_SECRET_ACCESS_KEY=$(echo $credentials | jq -r '.Credentials.SecretAccessKey')
          #     export TARGET_AWS_SESSION_TOKEN=$(echo $credentials | jq -r '.Credentials.SessionToken')

          #     # Deploy the stack using the pre-synthesized template
          #     AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN cdk deploy $stack_name --app "cdk.out" --require-approval never --context file=$file || { echo "Failed to deploy stack: $stack_name"; exit 1; }

          #     # Unset AWS credentials
          #     unset TARGET_AWS_ACCESS_KEY_ID TARGET_AWS_SECRET_ACCESS_KEY TARGET_AWS_SESSION_TOKEN
          #   done
          # done

        env:
          IAM_ROLE_CONFIG_DIRECTORY: iamConfigs
          AWS_DEFAULT_REGION: us-east-1  # Set your default region if necessary
        
      # - name: Deploy to Multiple Accounts
      #   run: |
      #     set -eo pipefail
      #     source .venv/bin/activate

      #     # Function to assume target account role
      #     assume_target_role() {
      #       local role_arn=$1
      #       local session_name=$2


      #     # Assume the target account role
      #       credentials=$(aws sts assume-role --role-arn $role_arn --role-session-name $session_name || { echo "Failed to assume role: $role_arn"; exit 1; })
      #       export TARGET_AWS_ACCESS_KEY_ID=$(echo $credentials | jq -r '.Credentials.AccessKeyId')
      #       export TARGET_AWS_SECRET_ACCESS_KEY=$(echo $credentials | jq -r '.Credentials.SecretAccessKey')
      #       export TARGET_AWS_SESSION_TOKEN=$(echo $credentials | jq -r '.Credentials.SessionToken')

      #       # Debug: Print the assumed role credentials
      #       echo "Assumed Role Credentials:"
      #       echo "AWS_ACCESS_KEY_ID: $TARGET_AWS_ACCESS_KEY_ID"
      #       echo "AWS_SECRET_ACCESS_KEY: $TARGET_AWS_SECRET_ACCESS_KEY"
      #       echo "AWS_SESSION_TOKEN: $TARGET_AWS_SESSION_TOKEN"
      #     }
      #     for file in iamConfigs/*.yaml; do
      #       account_ids=$(yq eval '.account_id | .[]' "$file")
      #       for account_id in $account_ids; do
      #         role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
      #         stack_name="IamRoleConfigStack-$account_id"
      #         echo "Deploying stack $stack_name to account $account_id using role $role_arn"

      #         # Assume the role for the current target account
      #         assume_target_role $role_arn github-actions || continue

      #         # Deploy the stack
      #         AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN aws sts get-caller-identity
      #         AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN cdk deploy $stack_name --require-approval never --context file=$file || { echo "Failed to deploy stack: $stack_name"; exit 1; }

      #         # Unset AWS credentials
      #         unset TARGET_AWS_ACCESS_KEY_ID TARGET_AWS_SECRET_ACCESS_KEY TARGET_AWS_SESSION_TOKEN
      #       done
      #     done

          # # for file in iamConfigs/*.yaml; do
          # #   account_id=$(yq eval '.account_id' "$file")
          # #   role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
          # #   stack_name="IamRoleConfigStack-$account_id"
          # #   echo "Deploying stack $stack_name to account $account_id using role $role_arn"

          # for file in iamConfigs/*.yaml; do
          #   for account_id in $(yq eval '.account_id | .[]' "$file"); do
          #     role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
          #     stack_name="IamRoleConfigStack-$account_id"
          #     echo "Deploying stack $stack_name to account $account_id using role $role_arn"

          #   # Debug: Print the role ARN and account ID
          #   echo "Role ARN: $role_arn"
          #   echo "Account ID: $account_id"

          #   # Assume the role for the current target account
          #   assume_target_role $role_arn github-actions

          #   # Deploy the stack
          #   AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN aws sts get-caller-identity
          #   AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN cdk deploy $stack_name --require-approval never --context file=$file || { echo "Failed to deploy stack: $stack_name"; exit 1; }


          #   # Unset AWS credentials to clear them for the next iteration
          #   unset TARGET_AWS_ACCESS_KEY_ID
          #   unset TARGET_AWS_SECRET_ACCESS_KEY
          #   unset TARGET_AWS_SESSION_TOKEN

          #   # Debug: Confirm credentials are unset
          #   echo "Unset AWS credentials"
          #   done
          # done

        # env:
        #   IAM_ROLE_CONFIG_DIRECTORY: iamConfigs
        #   AWS_DEFAULT_REGION: us-east-1  # Set your default region if necessary
      
  