name: Deploy CDK App to Multiple Accounts

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read      

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install --upgrade pip
          pip3 install -r requirements.txt

      - name: Run Unit Tests
        run: |
            source .venv/bin/activate
            pytest tests/unit

      - name: Install AWS CDK and Utilities
        run: |
          npm install -g aws-cdk@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Install Synk CLI
        run: npm install -g snyk
      
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: CDK Synthesise 
        run: |
          source .venv/bin/activate
          cdk synth -o cdk.out
          echo "Generated Stacks:"
          ls cdk.out/*.template.json | sed 's|cdk.out/||;s|.template.json||'
          
      - name: Display Synthesized Templates
        run: |
            echo "Displaying contents of synthesized CDK templates:"
            for template in cdk.out/*.template.json; do
              echo "-----------------------------"
              echo "Template: $template"
              echo "-----------------------------"
              cat "$template"
              echo -e "\n"
            done       
          

      - name: Configure AWS Credentials using OIDC Identity
        uses: aws-actions/configure-aws-credentials@v4
        with:
           role-to-assume: arn:aws:iam::909180469036:role/OIDC-GitHubActionsRole
           role-session-name: OIDC-GitHubActionsRole
           aws-region: us-east-1    
           audience: sts.amazonaws.com
           role-duration-seconds: 3600
          
      - name: Set Environment Variables
        id: vars
        run: |
          echo "month=$(date +'%Y-%m')" >> $GITHUB_ENV
          echo "date=$(date +'%m-%d-%Y')" >> $GITHUB_ENV
          echo "datetime=$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
        
      - name: Scan cdk json output
        run: snyk iac test cdk.out/*.json --sarif-file-output=snyk_${{ env.datetime }}.sarif --report
        continue-on-error: true

      - name: Deploy to Multiple Accounts
        run: |
          set -eo pipefail
          source .venv/bin/activate


          # List all synthesized stack templates
          for stack_template in cdk.out/*.template.json; do
            # Extract the stack name
            stack_name=$(basename $stack_template .template.json)

          # Extract the account ID from the stack name (assuming stack names have account IDs)
          account_id=$(echo $stack_name | grep -oP '(?<=SecurityConfigStack-)\d+')

          if [ -n "$account_id" ]; then
            role_arn="arn:aws:iam::$account_id:role/GitHubActionsRole"
            echo "Deploying stack $stack_name to account $account_id using role $role_arn"

            # Assume the role for the current target account
            credentials=$(aws sts assume-role --role-arn $role_arn --role-session-name github-actions || { echo "Failed to assume role: $role_arn"; exit 1; })
            export TARGET_AWS_ACCESS_KEY_ID=$(echo $credentials | jq -r '.Credentials.AccessKeyId')
            export TARGET_AWS_SECRET_ACCESS_KEY=$(echo $credentials | jq -r '.Credentials.SecretAccessKey')
            export TARGET_AWS_SESSION_TOKEN=$(echo $credentials | jq -r '.Credentials.SessionToken')

            # Deploy the stack using the pre-synthesized template
            AWS_ACCESS_KEY_ID=$TARGET_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TARGET_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$TARGET_AWS_SESSION_TOKEN cdk deploy $stack_name --app "cdk.out" --require-approval never  || { echo "Failed to deploy stack: $stack_name"; exit 1; }

            # Unset AWS credentials
            unset TARGET_AWS_ACCESS_KEY_ID TARGET_AWS_SECRET_ACCESS_KEY TARGET_AWS_SESSION_TOKEN
          else
            echo "Could not extract account ID from stack name $stack_name"
            exit 1
          fi
          done

        env:
          IAM_ROLE_CONFIG_DIRECTORY: iamConfigs
          AWS_DEFAULT_REGION: us-east-1  # Set your default region if necessary
        