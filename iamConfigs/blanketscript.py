import subprocess
import os
import json
import sys
import logging


def run_command(command, log_file=None):
    """Run a shell command and return the output. Optionally log the output."""
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Optionally log the output to a file
        if log_file:
            with open(log_file, 'a') as f:
                f.write(result.stdout)
                f.write(result.stderr)

        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {command}")
        if log_file:
            with open(log_file, 'a') as f:
                f.write(e.stderr)
        print(e.stderr)
        return None

def check_required_scripts():
    """Check if the required scripts are present in the current directory."""
    required_scripts = [
        "cdkImportAutomationScript.py",
        "resource-map-RolenamePolicies.py"
    ]
    
    missing_scripts = [script for script in required_scripts if not os.path.exists(script)]
    
    if missing_scripts:
        # Print the missing scripts and exit with an error
        print(f"Error: The following required scripts are missing in the current directory: {', '.join(missing_scripts)}")
        sys.exit(1)  # Exit with a status code 1 to indicate failure
    else:
        print("All required scripts are present.")

def step1_run_cdk_import_script():
    """Run the first Python script to create IAM config YAML file."""
    print("Step 1: Running CDKImport script to generate IAM config YAML...")
    
    # Capture logs in a file
    log_file = "cdk_import_script.log"
    
    # Directly run the script without changing directories
    run_command("python cdkImportAutomationScript.py", log_file=log_file)
    
    print("Step 1 completed. Logs saved to cdk_import_script.log")

def step2_cdk_synth():
    """Run cdk synth and print the output."""
    print("Step 2: Running cdk synth...")

    # Change to the main app directory (assuming main app folder is one level up)
    os.chdir("..")  # Go one level up from iamConfigs to main app directory

    # Run cdk synth and capture output
    synth_output = run_command("cdk synth")  # No -j flag since we only need plain text
    
    # Print the raw output
    print(synth_output if synth_output else "cdk synth returned no output or failed.")

def step3_run_resource_map_script(account_id):
    """Run the resource-map-RolenamePolicies.py script with a file name based on account ID."""
    print("Step 3: Running resource-map-RolenamePolicies.py...")

    # Detect current working directory
    current_dir = get_current_directory()
    print(f"Current directory: {current_dir}")

    # Build the path to the /cdk.out directory (relative to the main app folder)
    cdk_out_dir = os.path.join(current_dir, "cdk.out")
    print(f"cdk.out directory: {cdk_out_dir}")

    # Find the file that starts with the desired name pattern
    file_prefix = f"SecurityConfigStack-{account_id}-iam-role-policies-pipeline-stack.template.json"
    print(f"File prefix: {file_prefix}")
    
    # Iterate through the files in /cdk.out to find the matching file
    selected_file = None
    for file_name in os.listdir(cdk_out_dir):
        if file_name.startswith(file_prefix):
            selected_file = file_name
            break

    if not selected_file:
        print(f"Error: No file found with prefix {file_prefix} in /cdk.out")
        return

    # Full path to the selected file
    file_path = os.path.join(cdk_out_dir, selected_file)
    print(f"Selected file path: {file_path}")

    # Construct the full path to resource-map-RolenamePolicies.py inside iamConfigs directory
    resource_map_script_path = os.path.join(current_dir, "iamConfigs", "resource-map-RolenamePolicies.py")

    # Run the resource-map-RolenamePolicies.py script with the selected file as input
    output = run_command(f"python3 {resource_map_script_path} {file_path}")
    # output = run_command(f"python3 resource-map-RolenamePolicies.py {file_path}")
    print( f"python resource-map-RolenamePolicies.py {resource_map_script_path} {file_path}")
    # Capture the name of the file generated by resource-map-RolenamePolicies.py
    generated_file = None
    if output and "Resource map written to " in output:
        generated_file = output.split("Resource map written to ")[-1].strip()

    if generated_file:
        print(f"Resource map created: {generated_file}")
    else:
        print("Error: No output file generated by resource-map-RolenamePolicies.py")

    print("Step 3 completed.")
    return generated_file


def step4_run_cdk_import(account_id, generated_file):
    """Run cdk import for the stack using the generated resource map file."""
    logging.info("Step 4: Running cdk import...")

    # Detect current working directory
    current_dir1 = get_current_directory()
    print(f"Current directory: {current_dir1}")

    # Check if we're in the iamConfigs directory, and if so, move one level up
    if "iamConfigs" in current_dir1:
        os.chdir("..")  # Go one level up to reach the main directory
        print(f"Changed directory to: {os.getcwd()}")

    # Log the working directory after potential changes
    print(f"Current working directory (after potential changes): {os.getcwd()}")

    # Construct the stack name using account_id
    stack_name = f"SecurityConfigStack-{account_id}-iam-role-policies-pipeline-stack"
    print(f"Stack name: {stack_name}")

    # Ensure the resource map file exists, with the absolute path
    resource_map_file = os.path.abspath(os.path.join("iamConfigs", generated_file))
    if not os.path.exists(resource_map_file):
        logging.error(f"Error: Resource map file '{resource_map_file}' not found.")
        return

    # Log the command before running it
    command = f"cdk import {stack_name} -m {resource_map_file}"
    print(f"Running command: {command}")

    # Run the command and capture any errors
    try:
        run_command(command)
        logging.info("cdk import command completed successfully.")
    except Exception as e:
        logging.error(f"Error running cdk import command: {str(e)}")
        print(f"Error running cdk import command: {str(e)}")
    logging.info("Step 4 completed.")



def step5_check_stack_drift(stack_names):
    """Check the CloudFormation stack drift status."""
    print("Step 5: Checking CloudFormation stack drift status...")
    for stack_name in stack_names:
        drift_command = f"aws cloudformation detect-stack-drift --stack-name {stack_name}"
        drift_result = run_command(drift_command)
        print(f"Drift detection started for {stack_name}. Drift result: {drift_result}")
    print("Step 5 completed.")

def get_current_directory():
    """Get the current working directory."""
    return os.getcwd()

def get_aws_account_id():
    """Fetch AWS account ID using local credentials via boto3."""
    import boto3
    client = boto3.client('sts')
    account_id = client.get_caller_identity()["Account"]
    return account_id

def main():
    """Main function to coordinate the steps."""
    # Step 0: Check that required scripts are available
    check_required_scripts()

    # Get the AWS account ID dynamically
    account_id = get_aws_account_id()

    # Step 1: Run the CDK import script (inside iamConfigs)
    step1_run_cdk_import_script()

    # Step 2: Run cdk synth and display the output (inside the main app directory)
    step2_cdk_synth()

    # Step 3: Run the resource map script and capture the output file name (inside iamConfigs)
    generated_file = step3_run_resource_map_script(account_id)

    # **Switch to the main app directory** after Step 3 (if we're still in iamConfigs)
    logging.info("Switching to main app directory for Step 4.")
    if "iamConfigs" in os.getcwd():
        os.chdir("..")
        logging.info(f"Changed directory to: {os.getcwd()}")

    # Step 4: Run cdk import using the captured stack names and generated resource map (inside the main app directory)
    step4_run_cdk_import(account_id, generated_file)

    # Step 5: Check CloudFormation stack drift status
    step5_check_stack_drift([generated_file])



if __name__ == "__main__":
    main()
